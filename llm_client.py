# llm_client.py
from __future__ import annotations
import os
from typing import Optional, Dict, Any, List

from openai import OpenAI

# --------------- –ö–æ–Ω—Ñ–∏–≥ ---------------

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
LLM_NANO  = os.getenv("LLM_NANO",  "gpt-4o-mini")   # —Ç–≤–æ–π env –º–æ–∂–µ—Ç –±—ã—Ç—å gpt-5-nano ‚Äî –æ—Å—Ç–∞–≤–ª—è—é –∫–∞–∫ –µ—Å—Ç—å
LLM_MINI  = os.getenv("LLM_MINI",  "gpt-4o-mini")
LLM_MAJOR = os.getenv("LLM_MAJOR", "gpt-4.1")       # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

TOKEN_BUDGET_PER_DAY = int(os.getenv("LLM_TOKEN_BUDGET_PER_DAY", "30000") or "30000")

_client: Optional[OpenAI] = None

def _client_ok() -> bool:
    return bool(OPENAI_API_KEY)

def _get_client() -> OpenAI:
    global _client
    if _client is None:
        _client = OpenAI(api_key=OPENAI_API_KEY)
    return _client

# --------------- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ ---------------

def _responses_call(model: str, prompt: str, max_output_tokens: Optional[int] = None) -> str:
    """
    –ë–µ–∑ temperature/max_tokens: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ 5-–µ –º–æ–¥–µ–ª–∏ –∫–∏–¥–∞—é—Ç 400 –Ω–∞ —ç—Ç–∏ –ø–æ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º Responses API (SDK v1).
    """
    if not _client_ok():
        raise RuntimeError("OPENAI_API_KEY not set")

    client = _get_client()

    # –°—Ç–∞—Ä–∞–µ–º—Å—è –Ω–µ —Å–ª–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    text = (prompt or "").strip()
    if not text:
        raise ValueError("LLM prompt is empty")

    kwargs: Dict[str, Any] = {
        "model": model,
        "input": text,
    }
    if max_output_tokens is not None:
        # —É 5-–π –ª–∏–Ω–µ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–µ ‚Äî max_output_tokens
        kwargs["max_output_tokens"] = int(max_output_tokens)

    try:
        r = client.responses.create(**kwargs)
        # –û—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –ª–µ–∂–∞—Ç—å –≤ output_text, –ª–∏–±–æ –≤ –ø–µ—Ä–≤–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        if hasattr(r, "output_text") and r.output_text:
            return r.output_text.strip()

        # fallback —Ä–∞–∑–±–æ—Ä
        for out in getattr(r, "output", []) or []:
            if getattr(out, "type", "") == "message":
                parts = getattr(out, "content", []) or []
                for p in parts:
                    if getattr(p, "type", "") == "output_text":
                        val = getattr(p, "text", "") or ""
                        if val.strip():
                            return val.strip()

        # –µ—â—ë –æ–¥–∏–Ω –º—è–≥–∫–∏–π fallback
        txt = str(r)
        return txt.strip() if txt.strip() else ""
    except Exception as e:
        # –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–≤–µ—Ä—Ö ‚Äî –ø—É—Å—Ç—å –≤—ã–∑—ã–≤–∞—é—â–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–∏—Ç
        raise

# --------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---------------

def nano_headlines_flags(pair: str, headlines: List[str]) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ '–º–∞—à–∏–Ω–Ω–æ–º' —É—Ä–æ–≤–Ω–µ (–¥—ë—à–µ–≤–æ).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON-—Ñ–ª–∞–≥ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è. –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    """
    prompt = (
        "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Ç—Ä–µ–π–¥–µ—Ä—É –ø–æ –§–æ—Ä–µ–∫—Å—É. –î–∞–Ω—ã –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É {pair}.\n"
        "–í–µ—Ä–Ω–∏ –ö–û–ú–ü–ê–ö–¢–ù–´–ô JSON (–±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞) —Å –∫–ª—é—á–∞–º–∏:\n"
        "risk_level: one of [OK, CAUTION, HIGH];\n"
        "bias: one of [both, long-only, short-only];\n"
        "horizon_min: int (–æ—Ü–µ–Ω–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö),\n"
        "confidence: 0..1 (float, –¥–≤–∞ –∑–Ω–∞–∫–∞);\n"
        "reasons: –∫–æ—Ä–æ—Ç–∫–∏–π –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ —Å 1-3 –ø—Ä–∏—á–∏–Ω–∞–º–∏.\n"
        "–ó–∞–≥–æ–ª–æ–≤–∫–∏:\n- " + "\n- ".join(headlines[:12])
    ).format(pair=pair)

    try:
        txt = _responses_call(LLM_NANO, prompt, max_output_tokens=450)
        import json
        # –∏–Ω–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–æ/–ø–æ—Å–ª–µ ‚Äî –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –≤—ã—á–ª–µ–Ω–∏—Ç—å JSON
        start = txt.find("{")
        end = txt.rfind("}")
        if start != -1 and end > start:
            j = json.loads(txt[start:end + 1])
            if isinstance(j, dict):
                return j
    except Exception:
        pass
    return {}

def mini_digest_ru(pairs: List[str], flags: Dict[str, Dict[str, Any]]) -> str:
    """
    ¬´–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π¬ª –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.
    pairs: —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –≤—Ä–æ–¥–µ ["USDJPY","AUDUSD","EURUSD","GBPUSD"]
    flags: —Å–ª–æ–≤–∞—Ä—å —Ñ–ª–∞–≥–æ–≤ –Ω–∞ –ø–∞—Ä—É, –∫–∞–∫ –≤–µ—Ä–Ω—É–ª nano_headlines_flags (–∏–ª–∏ –ø—É—Å—Ç–æ).
    """
    lines = []
    for p in pairs:
        f = flags.get(p, {}) or {}
        risk = str(f.get("risk_level", "OK")).upper()
        bias = str(f.get("bias", "both")).lower()
        conf = f.get("confidence", "")
        rs = f.get("reasons", []) or []
        bullet = "‚Ä¢ " + "; ".join(str(x) for x in rs[:3]) if rs else "‚Ä¢ –ë–µ–∑ –∑–∞–º–µ—Ç–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤."
        bias_txt = {
            "both": "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ñ–∏–∫—Å–∏—Ä—É–µ–º",
            "long-only": "—Å–º–µ—â–µ–Ω–∏–µ: long-bias",
            "short-only": "—Å–º–µ—â–µ–Ω–∏–µ: short-bias",
        }.get(bias, "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ñ–∏–∫—Å–∏—Ä—É–µ–º")

        icon = "‚úÖ" if risk == "OK" else ("‚ö†Ô∏è" if risk == "CAUTION" else "üö®")
        head = f"{p} ‚Äî {icon} {risk}"
        tail = f"{bullet}\n–ß—Ç–æ –¥–µ–ª–∞–µ–º: {bias_txt}."
        if conf:
            tail += f" (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {float(conf):.2f})"
        lines.append(head)
        lines.append(tail)
        lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    prompt = (
        "–°–æ–±–µ—Ä–∏ –∫–æ—Ä–æ—Ç–∫—É—é —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—É—é —Å–≤–æ–¥–∫—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—É–Ω–∫—Ç–æ–≤. "
        "–ú–∞–∫—Å–∏–º—É–º 6‚Äì8 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å, –±–µ–∑ –≤–æ–¥—ã, –±–µ–∑ —Å–ø–∏—Å–∫–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤—Ö–æ–¥–∞–º. "
        "–ù–µ –¥–æ–±–∞–≤–ª—è–π –ø—Ä–µ—Ñ–∏–∫—Å—ã –≤—Ä–æ–¥–µ '–ò—Ç–æ–≥:' ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç.\n\n"
        + "\n".join(lines)
    )

    try:
        txt = _responses_call(LLM_MINI, prompt, max_output_tokens=700)
        return txt.strip() or "–°–≤–æ–¥–∫–∞: –±–µ–∑ —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π."
    except Exception as e:
        return f"LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"
