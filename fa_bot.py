# fa_bot.py
from __future__ import annotations
import os, logging, asyncio
from dataclasses import dataclass
from typing import Dict

from telegram import Update, BotCommand
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler, filters
)

# --- rate limiter (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω extra) ---
try:
    from telegram.ext._aioratelimiter import AIORateLimiter  # ptb>=20.8
except Exception:  # –±–µ–∑ extras —Ç–æ–∂–µ –æ–∫
    AIORateLimiter = None

logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
)
log = logging.getLogger("fund_bot")

TELEGRAM_TOKEN = os.environ["TELEGRAM_TOKEN"]
MASTER_CHAT_ID = int(os.getenv("MASTER_CHAT_ID", "0"))

# LLM –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ–º (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è /digest –∏ —Ç.–ø.)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
LLM_NANO  = os.getenv("LLM_NANO",  "gpt-5-nano")
LLM_MINI  = os.getenv("LLM_MINI",  "gpt-5-mini")
LLM_MAJOR = os.getenv("LLM_MAJOR", "gpt-5")

# –•—Ä–∞–Ω–∏–º –≤ –ø–∞–º—è—Ç–∏ —Ç–µ–∫—É—â—É—é —Ü–µ–ª—å –∏ –≤–µ—Å–∞ (–º–æ–≥—É—Ç –∂–∏—Ç—å –≤ Sheets ‚Äî –ø–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏–º)
@dataclass
class AllocState:
    total: float = 0.0
    weights: Dict[str, float] = None  # keys: JPY/AUD/EUR/GBP

state = AllocState(
    total=0.0,
    weights={"JPY": 40.0, "AUD": 25.0, "EUR": 20.0, "GBP": 15.0}
)

PAIR_BY_CCY = {
    "JPY": "USDJPY",
    "AUD": "AUDUSD",
    "EUR": "EURUSD",
    "GBP": "GBPUSD",
}

def require_master(update: Update) -> bool:
    if MASTER_CHAT_ID == 0:
        return True
    chat_id = update.effective_chat.id if update.effective_chat else None
    return chat_id == MASTER_CHAT_ID

def calc_alloc(total: float, weights: Dict[str, float]) -> Dict[str, float]:
    s = sum(weights.values()) or 1.0
    return {PAIR_BY_CCY[k]: round(total * (v / s), 2) for k, v in weights.items() if k in PAIR_BY_CCY}

async def set_commands(app: Application):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å–∫ –∏ –∫—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞"),
        BotCommand("chatid", "–ü–æ–∫–∞–∑–∞—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"),
        BotCommand("ping", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞"),
        BotCommand("setweights", "–ó–∞–¥–∞—Ç—å –≤–µ—Å–∞: /setweights jpy=40 aud=25 eur=20 gbp=15"),
        BotCommand("settotal", "–ó–∞–¥–∞—Ç—å –æ–±—â–∏–π –±–∞–Ω–∫: /settotal 2800"),
        BotCommand("alloc", "–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–µ–≤—ã–µ/—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —á–∞—Ç–æ–≤"),
        BotCommand("digest", "–ö–æ—Ä–æ—Ç–∫–∏–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –¥–∞–π–¥–∂–µ—Å—Ç"),
    ]
    await app.bot.set_my_commands(commands)
    log.info("Telegram commands set.")

# ---------------- Handlers ----------------

async def on_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    log.info("START from chat %s", update.effective_chat.id if update.effective_chat else None)
    await update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ—É–Ω–¥-–±–æ—Ç.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /setweights jpy=40 aud=25 eur=20 gbp=15 ‚Äî —Ü–µ–ª–µ–≤—ã–µ –≤–µ—Å–∞\n"
        "‚Ä¢ /settotal 2800 ‚Äî –æ–±—â–∏–π –±–∞–Ω–∫\n"
        "‚Ä¢ /alloc ‚Äî —Ä–∞—Å—á—ë—Ç —Å—É–º–º –ø–æ –ø–∞—Ä–∞–º –∏ –≥–æ—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Ç–æ–≤\n"
        "‚Ä¢ /digest ‚Äî —É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç (–ª—é–¥—Å–∫–∏–º —è–∑—ã–∫–æ–º)\n"
        "‚Ä¢ /chatid ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å id —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n"
        "‚Ä¢ /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n\n"
        f"MASTER_CHAT_ID —Å–µ–π—á–∞—Å: {MASTER_CHAT_ID or '–Ω–µ –∑–∞–¥–∞–Ω'}"
    )

async def on_help(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        "–°–ø—Ä–∞–≤–∫–∞:\n"
        "1) –í –º–∞—Å—Ç–µ—Ä-—á–∞—Ç–µ –∑–∞–¥–∞—ë—à—å –≤–µ—Å–∞ –∏ –æ–±—â–∏–π –±–∞–Ω–∫:\n"
        "   /setweights jpy=40 aud=25 eur=20 gbp=15\n"
        "   /settotal 2800\n"
        "2) –ö–æ–º–∞–Ω–¥–æ–π /alloc –ø–æ–ª—É—á–∞–µ—à—å —Å—É–º–º—ã –ø–æ –ø–∞—Ä–∞–º –∏ –∫—É—Å–æ—á–∫–∏ –¥–ª—è –∫–æ–ø–∏–ø–∞—Å—Ç–∞ –≤ —Ç–æ—Ä–≥–æ–≤—ã–µ —á–∞—Ç—ã.\n"
        "3) /digest ‚Äî —Å–≤–æ–¥–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º.\n"
        "–ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º, —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–µ ‚Äî —Ç–æ–ª—å–∫–æ MASTER_CHAT_ID."
    )

async def on_chatid(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if not chat:
        return
    await update.effective_message.reply_text(f"chat_id: <code>{chat.id}</code>", parse_mode="HTML")

async def on_ping(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text("pong ‚úÖ")

def parse_weights(text: str) -> Dict[str, float] | None:
    # –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: "jpy=40 aud=25 ..."
    parts = text.strip().split()
    out = {}
    for p in parts:
        if "=" not in p:
            continue
        k, v = p.split("=", 1)
        k = k.strip().upper()
        try:
            val = float(v.strip().replace(",", "."))
        except ValueError:
            return None
        if k in {"JPY", "AUD", "EUR", "GBP"}:
            out[k] = val
    return out or None

async def on_setweights(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not require_master(update):
        return await update.effective_message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –º–∞—Å—Ç–µ—Ä-—á–∞—Ç–µ.")
    args = (ctx.args or [])
    new = parse_weights(" ".join(args))
    if not new:
        return await update.effective_message.reply_text(
            "–§–æ—Ä–º–∞—Ç: /setweights jpy=40 aud=25 eur=20 gbp=15"
        )
    state.weights.update(new)
    await update.effective_message.reply_text(
        "–¶–µ–ª–µ–≤—ã–µ –≤–µ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: " + " / ".join(f"{k} {int(v)}" for k, v in state.weights.items())
    )

async def on_settotal(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not require_master(update):
        return await update.effective_message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –º–∞—Å—Ç–µ—Ä-—á–∞—Ç–µ.")
    if not ctx.args:
        return await update.effective_message.reply_text("–§–æ—Ä–º–∞—Ç: /settotal 2800")
    try:
        total = float(ctx.args[0].replace(",", "."))
    except ValueError:
        return await update.effective_message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: /settotal 2800")
    state.total = max(0.0, total)
    await update.effective_message.reply_text(f"–û–±—â–∏–π –±–∞–Ω–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {state.total:.2f} USDT")

async def on_alloc(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not require_master(update):
        return await update.effective_message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –º–∞—Å—Ç–µ—Ä-—á–∞—Ç–µ.")
    if state.total <= 0:
        return await update.effective_message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –±–∞–Ω–∫: /settotal 2800")
    alloc = calc_alloc(state.total, state.weights)
    lines = []
    copy = []
    for pair, amount in alloc.items():
        lines.append(f"{pair} ‚Üí <b>{amount:.2f} USDT</b>")
        copy.append(f"{pair}: /setbank {amount:.0f}")
    text = "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–ª–µ–≤—ã–º –≤–µ—Å–∞–º:\n" + "\n".join(lines)
    text += "\n\n–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Ç–æ–≤:\n" + "\n".join(copy)
    await update.effective_message.reply_text(text, parse_mode="HTML")

# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –≤–∞—à llm_client; –ø–æ–∫–∞ –¥–µ–ª–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
async def on_digest(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if not require_master(update):
        return await update.effective_message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –º–∞—Å—Ç–µ—Ä-—á–∞—Ç–µ.")
    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π —à–∞–±–ª–æ–Ω (LLM –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ)
    msg = (
        "üß≠ –£—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–æ–Ω\n\n"
        "USDJPY ‚Äî üöß –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, —Ä–∏—Å–∫ –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–π\n"
        "‚Ä¢ –û–∫–Ω–∞ —Ç–∏—à–∏–Ω—ã ¬±45 –º–∏–Ω –∫ ¬´–∫—Ä–∞—Å–Ω—ã–º¬ª —Ä–µ–ª–∏–∑–∞–º. –°–º–µ—â–µ–Ω–∏–µ ‚Äî short-bias.\n\n"
        "AUDUSD ‚Äî ‚úÖ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–ø–æ–∑–∏—Ç–∏–≤–Ω–æ\n"
        "‚Ä¢ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º, —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –ø–æ –ø–ª–∞–Ω—É.\n\n"
        "EURUSD ‚Äî ‚úÖ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ\n"
        "‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –±–ª–∏–∑–∫–∞ –∫ —Å—Ä–µ–¥–Ω–µ–π.\n\n"
        "GBPUSD ‚Äî ‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ\n"
        "‚Ä¢ –í–æ–ª–∞ —Ä–∞—Å—Ç—ë—Ç; —Å–Ω–∏–∑–∏—Ç—å –¥–æ–±–æ—Ä—ã –Ω–∞ 25%."
    )
    await update.effective_message.reply_text(msg)

async def on_unknown(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text("–ù–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π /help")

async def main():
    log.info("Fund bot is running‚Ä¶")
    builder = Application.builder().token(TELEGRAM_TOKEN)
    if AIORateLimiter:
        builder = builder.rate_limiter(AIORateLimiter())
    app = builder.build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    app.post_init = set_commands

    app.add_handler(CommandHandler("start", on_start))
    app.add_handler(CommandHandler("help", on_help))
    app.add_handler(CommandHandler("chatid", on_chatid))
    app.add_handler(CommandHandler("ping", on_ping))

    app.add_handler(CommandHandler("setweights", on_setweights))
    app.add_handler(CommandHandler("settotal", on_settotal))
    app.add_handler(CommandHandler("alloc", on_alloc))
    app.add_handler(CommandHandler("digest", on_digest))

    # –ª–æ–≥ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –¥–µ–±–∞–≥–∞)
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, lambda u, c: log.info("Update: %s", u)))

    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(MessageHandler(filters.COMMAND, on_unknown))

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º long polling
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    await app.run_polling(close_loop=False)

if __name__ == "__main__":
    asyncio.run(main())
