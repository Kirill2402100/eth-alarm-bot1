import os
import json
import logging
import asyncio
from datetime import datetime, timezone
from typing import Dict, Any, Optional, List, Tuple

import gspread
import pandas as pd
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram import Update

from llm_client import summarize_pair_ru, classify_headlines_nano, deep_escalation_ru, llm_usage_today

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(name)s: %(message)s")
log = logging.getLogger("fund_bot")

# ========= ENV =========
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")          # —Ç–æ–∫–µ–Ω –¢–ì –±–æ—Ç–∞ (—Ñ—É–Ω–¥-–±–æ—Ç)
MASTER_CHAT_ID = os.getenv("MASTER_CHAT_ID", "")         # –∫—É–¥–∞ —Å–ª–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç/—Å–≤–æ–¥–∫–∏ (–µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –≤ —á–∞—Ç, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞)
SHEET_ID = os.getenv("SHEET_ID", "")                     # Google Sheet ID
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS", "")  # JSON service account

# –ü–∞—Ä—ã –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ñ—É–Ω–¥-–±–æ—Ç–∞
PAIRS = ["USDJPY", "AUDUSD", "EURUSD", "GBPUSD"]
PAIR_TO_QUOTE = {"USDJPY": "JPY", "AUDUSD": "AUD", "EURUSD": "EUR", "GBPUSD": "GBP"}

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤–µ—Å–æ–≤ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ ENV 'DEFAULT_WEIGHTS')
DEFAULT_WEIGHTS_ENV = os.getenv("DEFAULT_WEIGHTS", '{"JPY":40,"AUD":25,"EUR":20,"GBP":15}')

def _parse_weights_env(s: str) -> Dict[str, float]:
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º JSON –∏ —Ñ–æ—Ä–º–∞—Ç 'JPY:40,AUD:25,EUR:20,GBP:15'."""
    try:
        obj = json.loads(s)
        return {k.upper(): float(v) for k, v in obj.items()}
    except Exception:
        parts = [p.strip() for p in s.replace(";", ",").split(",") if p.strip()]
        out = {}
        for p in parts:
            if ":" in p:
                k, v = p.split(":", 1)
            elif "=" in p:
                k, v = p.split("=", 1)
            else:
                continue
            try:
                out[k.strip().upper()] = float(v.strip())
            except Exception:
                pass
        return out or {"JPY": 40, "AUD": 25, "EUR": 20, "GBP": 15}

DEFAULT_WEIGHTS = _parse_weights_env(DEFAULT_WEIGHTS_ENV)

# ========= Google Sheets helpers =========

def _gs_client() -> Optional[gspread.Client]:
    if not (SHEET_ID and GOOGLE_CREDENTIALS_JSON):
        return None
    try:
        creds = json.loads(GOOGLE_CREDENTIALS_JSON)
        return gspread.service_account_from_dict(creds)
    except Exception:
        log.exception("Google credentials parse error")
        return None

def _ensure_ws(sh, title: str, headers: Optional[List[str]] = None):
    try:
        ws = sh.worksheet(title)
    except gspread.WorksheetNotFound:
        ws = sh.add_worksheet(title=title, rows=2000, cols=20)
        if headers:
            ws.append_row(headers)
    return ws

def _read_fa_policy_from_sheet(symbol: str) -> Dict[str, Any]:
    """
    –ß–∏—Ç–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –∏–∑ –ª–∏—Å—Ç–∞ FA_Signals (–µ—Å–ª–∏ –µ—Å—Ç—å).
    –ü–æ–ª—è: pair, risk(Green/Amber/Red), bias(neutral/long-only/short-only), ttl, updated_at,
          scan_lock_until, reserve_off, dca_scale
    """
    gc = _gs_client()
    if not gc:
        return {}
    try:
        sh = gc.open_by_key(SHEET_ID)
        try:
            ws = sh.worksheet("FA_Signals")
        except gspread.WorksheetNotFound:
            return {}
        rows = ws.get_all_records()
        for r in rows:
            if str(r.get("pair", "")).upper() == symbol.upper():
                risk = (str(r.get("risk", "") or "Green").capitalize())
                bias = (str(r.get("bias", "") or "neutral").lower())
                ttl = int(r.get("ttl") or 0)
                updated_at = str(r.get("updated_at") or "").strip()
                try:
                    reserve_off = str(r.get("reserve_off") or "").strip().lower() in ("1","true","yes","on")
                except Exception:
                    reserve_off = False
                try:
                    dca_scale = float(r.get("dca_scale") or 1.0)
                except Exception:
                    dca_scale = 1.0

                # TTL: –µ—Å–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ ‚Äî –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ (–ø—É—Å—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ç)
                if ttl and updated_at:
                    try:
                        ts = pd.to_datetime(updated_at, utc=True)
                        if pd.Timestamp.utcnow() > ts + pd.Timedelta(minutes=ttl):
                            return {}
                    except Exception:
                        pass

                scan_lock_until = str(r.get("scan_lock_until") or "").strip()
                return {
                    "risk": risk, "bias": bias, "ttl": ttl, "updated_at": updated_at,
                    "scan_lock_until": scan_lock_until, "reserve_off": reserve_off, "dca_scale": dca_scale
                }
        return {}
    except Exception:
        log.exception("read FA_Signals failed")
        return {}

def _write_alloc_snapshot(total: float, weights: Dict[str, float], per_pair: Dict[str, float], run_id: str):
    """
    –ü–∏—à–µ–º –≤ –ª–∏—Å—Ç 'FA_Alloc': run_id, ts_utc, total, weights_json, pair, target_bank
    """
    gc = _gs_client()
    if not gc:
        return
    try:
        sh = gc.open_by_key(SHEET_ID)
        ws = _ensure_ws(sh, "FA_Alloc", headers=["run_id","ts_utc","total_usdt","weights_json","pair","target_usdt"])
        wjson = json.dumps(weights, ensure_ascii=False)
        ts = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        rows = [[run_id, ts, float(total), wjson, pair, float(amt)] for pair, amt in per_pair.items()]
        ws.append_rows(rows)
    except Exception:
        log.exception("write FA_Alloc failed")

def _write_config(total: Optional[float], weights: Optional[Dict[str, float]]):
    """
    –°–æ—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ total/weights –≤ –ª–∏—Å—Ç 'FA_Config' (K/V).
    """
    if not (SHEET_ID and GOOGLE_CREDENTIALS_JSON):
        return
    try:
        gc = _gs_client()
        if not gc:
            return
        sh = gc.open_by_key(SHEET_ID)
        ws = _ensure_ws(sh, "FA_Config", headers=["key","value","updated_at_utc"])
        kv = []
        ts = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        if total is not None:
            kv.append(["total_bank", str(total), ts])
        if weights is not None:
            kv.append(["weights_json", json.dumps(weights, ensure_ascii=False), ts])
        if kv:
            ws.append_rows(kv)
    except Exception:
        log.exception("write FA_Config failed")


# ========= –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞) =========
_state = {
    "total_bank": None,  # float
    "weights": DEFAULT_WEIGHTS.copy(),  # {"JPY":40,...}
}

def _norm_pair(sym: str) -> str:
    return (sym or "").upper()

def _risk_emoji(risk: str) -> str:
    return {"Green": "‚úÖ", "Amber": "‚ö†Ô∏è", "Red": "üö®"}.get((risk or "").capitalize(), "‚ÑπÔ∏è")

def _bias_ru(bias: str) -> str:
    m = {"neutral":"–æ–±–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "long-only":"—Ç–æ–ª—å–∫–æ LONG", "short-only":"—Ç–æ–ª—å–∫–æ SHORT"}
    return m.get((bias or "").lower(), "–æ–±–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

def _parse_weights_arg(s: str) -> Dict[str, float]:
    """
    /setweights jpy=40 aud=25 eur=20 gbp=15
    """
    out: Dict[str, float] = {}
    s = s.strip().replace(";", " ").replace(",", " ")
    parts = [p for p in s.split() if p]
    for p in parts:
        if "=" not in p:
            continue
        k, v = p.split("=", 1)
        k = k.strip().upper()
        try:
            out[k] = float(v.strip())
        except Exception:
            pass
    return out

def _alloc_per_pair(total: float, weights: Dict[str, float]) -> Dict[str, float]:
    s = sum(weights.get(ccy, 0.0) for ccy in ["JPY","AUD","EUR","GBP"])
    if s <= 0:
        return {p: 0.0 for p in PAIRS}
    # –Ω–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞ 100, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    scale = 100.0 / s
    wN = {k: v*scale for k, v in weights.items()}
    per: Dict[str, float] = {}
    for pair in PAIRS:
        ccy = PAIR_TO_QUOTE[pair]
        per[pair] = round(total * (wN.get(ccy, 0.0) / 100.0), 2)
    return per

# ========= –ö–æ–º–∞–Ω–¥—ã =========

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ñ—É–Ω–¥-–±–æ—Ç (–º–∞—Å—Ç–µ—Ä-–∫–∞–Ω–∞–ª).\n\n"
        "–Ø –Ω–µ –º–µ–Ω—è—é –±–∞–Ω–∫–∏ —Å–∞–º ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–µ–≤—ã–º –≤–µ—Å–∞–º –∏ –¥–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
        "–£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç ‚Äî –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã</b>:\n"
        "/settotal 2800 ‚Äî –∑–∞–¥–∞—Ç—å –æ–±—â–∏–π –±–∞–Ω–∫\n"
        "/setweights jpy=40 aud=25 eur=20 gbp=15 ‚Äî –∑–∞–¥–∞—Ç—å —Ü–µ–ª–µ–≤—ã–µ –≤–µ—Å–∞\n"
        "/alloc ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞—Å—á—ë—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n"
        "/morning ‚Äî —É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –ø–æ –ø–∞—Ä–∞–º\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å LLM/–±—é–¥–∂–µ—Ç–∞\n"
        "/help ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode="HTML")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_start(update, context)

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = llm_usage_today()
    txt = (
        f"LLM usage {u['date']}: in={u['input_tokens']} out={u['output_tokens']} (budget {u['budget']})\n"
        f"–¢–µ–∫—É—â–∏–µ –≤–µ—Å–∞: {json.dumps(_state['weights'], ensure_ascii=False)}\n"
        f"–û–±—â–∏–π –±–∞–Ω–∫: {(_state['total_bank'] if _state['total_bank'] is not None else '–Ω–µ –∑–∞–¥–∞–Ω')}"
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=txt)

async def cmd_settotal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settotal 2800")
        return
    try:
        total = float(context.args[0])
        if total <= 0:
            raise ValueError
    except Exception:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù—É–∂–µ–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –±–∞–Ω–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä: /settotal 2800")
        return

    _state["total_bank"] = total
    _write_config(total=total, weights=None)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–µ—Å–∞ ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂–µ–º —Ä–∞—Å—á—ë—Ç
    per = _alloc_per_pair(total, _state["weights"])
    lines = ["‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. –†–∞—Å—á—ë—Ç –ø–æ —Ç–µ–∫—É—â–∏–º –≤–µ—Å–∞–º:"]
    for pair in PAIRS:
        amt = per[pair]
        lines.append(f"‚Ä¢ {pair} ‚Üí <b>{amt:.2f} USDT</b>  ‚Üí –∫–æ–º–∞–Ω–¥–∞ –≤ —á–∞—Ç {pair}:  <code>/setbank {amt:.2f}</code>")
    # —Å–≤–æ–¥–∫–∞
    w = _state["weights"]
    fact = f"–¶–µ–ª–µ–≤—ã–µ –≤–µ—Å–∞: JPY {w.get('JPY',0):.0f} / AUD {w.get('AUD',0):.0f} / EUR {w.get('EUR',0):.0f} / GBP {w.get('GBP',0):.0f}"
    lines.append(fact)
    run_id = f"ALLOC-{datetime.utcnow().strftime('%Y-%m-%d-%H%M%S')}"
    _write_alloc_snapshot(total, w, per, run_id)

    await context.bot.send_message(chat_id=update.effective_chat.id, text="\n".join(lines), parse_mode="HTML")

async def cmd_setweights(update: Update, context: ContextTypes.DEFAULT_TYPE):
    argline = " ".join(context.args)
    neww = _parse_weights_arg(argline)
    if not neww:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setweights jpy=40 aud=25 eur=20 gbp=15")
        return

    # –û–±–Ω–æ–≤–∏–º —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª—é—á–∏
    for k in ["JPY","AUD","EUR","GBP"]:
        if k in neww:
            _state["weights"][k] = float(neww[k])

    _write_config(total=None, weights=_state["weights"])

    lines = ["‚úÖ –í–µ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."]
    if _state["total_bank"] is not None:
        per = _alloc_per_pair(_state["total_bank"], _state["weights"])
        for pair in PAIRS:
            amt = per[pair]
            lines.append(f"‚Ä¢ {pair} ‚Üí <b>{amt:.2f} USDT</b>  ‚Üí –∫–æ–º–∞–Ω–¥–∞:  <code>/setbank {amt:.2f}</code>")
        lines.append(
            f"–¶–µ–ª–µ–≤—ã–µ –≤–µ—Å–∞: JPY { _state['weights']['JPY']:.0f} / AUD { _state['weights']['AUD']:.0f} / "
            f"EUR { _state['weights']['EUR']:.0f} / GBP { _state['weights']['GBP']:.0f}"
        )
        run_id = f"ALLOC-{datetime.utcnow().strftime('%Y-%m-%d-%H%M%S')}"
        _write_alloc_snapshot(_state["total_bank"], _state["weights"], per, run_id)

    await context.bot.send_message(chat_id=update.effective_chat.id, text="\n".join(lines), parse_mode="HTML")

async def cmd_alloc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if _state["total_bank"] is None:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π –æ–±—â–∏–π –±–∞–Ω–∫: /settotal 2800")
        return
    per = _alloc_per_pair(_state["total_bank"], _state["weights"])
    lines = [f"–¢–µ–∫—É—â–∏–π —Ä–∞—Å—á—ë—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (total={_state['total_bank']:.2f}):"]
    for pair in PAIRS:
        lines.append(f"‚Ä¢ {pair}: {per[pair]:.2f} USDT  (–∫–æ–º–∞–Ω–¥–∞: /setbank {per[pair]:.2f})")
    await context.bot.send_message(chat_id=update.effective_chat.id, text="\n".join(lines))

async def cmd_morning(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = int(MASTER_CHAT_ID) if str(MASTER_CHAT_ID).strip() else update.effective_chat.id
    now_utc = datetime.utcnow().strftime("%H:%M")
    header = f"üß≠ –£—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–æ–Ω (UTC {now_utc})"
    blocks = [header]

    # TODO: —Å—é–¥–∞ –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏/–∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    headlines_by_pair: Dict[str, List[str]] = {}

    for sym in PAIRS:
        flags = _read_fa_policy_from_sheet(sym)  # –µ—Å–ª–∏ –ª–∏—Å—Ç–∞ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—ë—Ç—Å—è {}
        # –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ ‚Äî –º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –∏—Ö ¬´–¥—ë—à–µ–≤–æ¬ª
        hl = headlines_by_pair.get(sym, [])
        if hl:
            try:
                cls = await classify_headlines_nano(hl)
                # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å cls –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π –≤ —Å–≤–æ–¥–∫–µ
                flags = {**flags, "nano_headline_flags": cls}
            except Exception:
                pass

        try:
            text = await summarize_pair_ru(pair=sym, flags=flags, headlines=hl)
        except Exception as e:
            log.exception("summarize_pair_ru failed")
            risk = (flags.get("risk") or "Green").capitalize()
            bias = _bias_ru(flags.get("bias") or "neutral")
            roff = "–≤—ã–∫–ª" if flags.get("reserve_off") else "–≤–∫–ª"
            scale = flags.get("dca_scale", 1.0)
            text = (
                f"{_risk_emoji(risk)} {sym} ‚Äî {risk}. –†–µ–∂–∏–º: {bias}. "
                f"–†–µ–∑–µ—Ä–≤ –¥–æ–±–æ—Ä–æ–≤: {roff}. –ú–∞—Å—à—Ç–∞–± –¥–æ–±–æ—Ä–æ–≤: x{scale:.2f}."
            )

        blocks.append(f"\n<b>{sym}</b>\n{text}")

    await context.bot.send_message(chat_id=chat_id, text="\n".join(blocks), parse_mode="HTML")

async def cmd_escalate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –†—É—á–Ω–∞—è ¬´—Å—Ç–∞—Ä—à–∞—è¬ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: /escalate USDJPY –¢–µ–∫—Å—Ç/–∫–æ–Ω—Ç–µ–∫—Å—Ç
    """
    if len(context.args) < 2:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /escalate USDJPY –≤–∞—à –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        return
    pair = _norm_pair(context.args[0])
    ctx = " ".join(context.args[1:])
    try:
        text = await deep_escalation_ru(pair, ctx)
    except Exception:
        text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≥–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä —Å–µ–π—á–∞—Å."
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"<b>{pair}</b>\n{text}", parse_mode="HTML")


# ========= Bootstrap =========

def build_app() -> Application:
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("settotal", cmd_settotal))
    app.add_handler(CommandHandler("setweights", cmd_setweights))
    app.add_handler(CommandHandler("alloc", cmd_alloc))
    app.add_handler(CommandHandler("morning", cmd_morning))
    app.add_handler(CommandHandler("escalate", cmd_escalate))
    return app

if __name__ == "__main__":
    if not BOT_TOKEN:
        raise SystemExit("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
    app = build_app()
    log.info("Fund bot is running‚Ä¶")
    app.run_polling(close_loop=False)
